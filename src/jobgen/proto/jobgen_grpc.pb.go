// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobGenClient is the client API for JobGen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobGenClient interface {
	// Sends a request to initiate a crawler job
	GenerateCrawlerJob(ctx context.Context, in *CrawlerJobRequest, opts ...grpc.CallOption) (*CrawlerJobReply, error)
	// A server-to-client streaming RPC.
	//
	// Generates fake text to simulate a one way info stream
	StreamChatter(ctx context.Context, in *ChatterRequest, opts ...grpc.CallOption) (JobGen_StreamChatterClient, error)
}

type jobGenClient struct {
	cc grpc.ClientConnInterface
}

func NewJobGenClient(cc grpc.ClientConnInterface) JobGenClient {
	return &jobGenClient{cc}
}

func (c *jobGenClient) GenerateCrawlerJob(ctx context.Context, in *CrawlerJobRequest, opts ...grpc.CallOption) (*CrawlerJobReply, error) {
	out := new(CrawlerJobReply)
	err := c.cc.Invoke(ctx, "/proto.JobGen/GenerateCrawlerJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobGenClient) StreamChatter(ctx context.Context, in *ChatterRequest, opts ...grpc.CallOption) (JobGen_StreamChatterClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobGen_ServiceDesc.Streams[0], "/proto.JobGen/StreamChatter", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobGenStreamChatterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobGen_StreamChatterClient interface {
	Recv() (*Chatter, error)
	grpc.ClientStream
}

type jobGenStreamChatterClient struct {
	grpc.ClientStream
}

func (x *jobGenStreamChatterClient) Recv() (*Chatter, error) {
	m := new(Chatter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobGenServer is the server API for JobGen service.
// All implementations must embed UnimplementedJobGenServer
// for forward compatibility
type JobGenServer interface {
	// Sends a request to initiate a crawler job
	GenerateCrawlerJob(context.Context, *CrawlerJobRequest) (*CrawlerJobReply, error)
	// A server-to-client streaming RPC.
	//
	// Generates fake text to simulate a one way info stream
	StreamChatter(*ChatterRequest, JobGen_StreamChatterServer) error
	mustEmbedUnimplementedJobGenServer()
}

// UnimplementedJobGenServer must be embedded to have forward compatible implementations.
type UnimplementedJobGenServer struct {
}

func (UnimplementedJobGenServer) GenerateCrawlerJob(context.Context, *CrawlerJobRequest) (*CrawlerJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCrawlerJob not implemented")
}
func (UnimplementedJobGenServer) StreamChatter(*ChatterRequest, JobGen_StreamChatterServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChatter not implemented")
}
func (UnimplementedJobGenServer) mustEmbedUnimplementedJobGenServer() {}

// UnsafeJobGenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobGenServer will
// result in compilation errors.
type UnsafeJobGenServer interface {
	mustEmbedUnimplementedJobGenServer()
}

func RegisterJobGenServer(s grpc.ServiceRegistrar, srv JobGenServer) {
	s.RegisterService(&JobGen_ServiceDesc, srv)
}

func _JobGen_GenerateCrawlerJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlerJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobGenServer).GenerateCrawlerJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.JobGen/GenerateCrawlerJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobGenServer).GenerateCrawlerJob(ctx, req.(*CrawlerJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobGen_StreamChatter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobGenServer).StreamChatter(m, &jobGenStreamChatterServer{stream})
}

type JobGen_StreamChatterServer interface {
	Send(*Chatter) error
	grpc.ServerStream
}

type jobGenStreamChatterServer struct {
	grpc.ServerStream
}

func (x *jobGenStreamChatterServer) Send(m *Chatter) error {
	return x.ServerStream.SendMsg(m)
}

// JobGen_ServiceDesc is the grpc.ServiceDesc for JobGen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobGen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JobGen",
	HandlerType: (*JobGenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCrawlerJob",
			Handler:    _JobGen_GenerateCrawlerJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChatter",
			Handler:       _JobGen_StreamChatter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/jobgen.proto",
}
